# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AttendListEntity {
  fictionBoard: FictionBoardEntity!
  user: UserEntity!
}

type BoardEntity {
  """본문"""
  content: String!

  """이미지 버퍼"""
  image: String @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")

  """좋아요 수"""
  like: Int! @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")

  """찜 수"""
  pickCount: Int! @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")

  """게시글 찜 목록"""
  picks: [PickEntity!]!

  """태그"""
  tag: String! @deprecated(reason: "설계오류로 인해 제거되거나 확장 될 예정")

  """제목"""
  title: String!

  """게시글 작성한 유저"""
  user: UserEntity!
}

type CommentEntity {
  """댓글이 달린 게시글"""
  board: BoardEntity!

  """댓글"""
  content: String!

  """댓글이 달린 소설 게시글"""
  fictionBoard: FictionBoardEntity!

  """댓글을 작성한 유저"""
  user: UserEntity!
}

input CreateBoardInput {
  content: String!
  image: String
  tag: [String!]!
  title: String!
}

input CreateFictionBoardInput {
  content: String!
  deadline: String!
  genre: String!
  image: String
  notice: String
  tag: [String!]
  title: String!
}

input CreateUserInput {
  age: String!
  cPassword: String!
  email: String!
  gender: String!
  image: String
  name: String!
  nickname: String!
  password: String!
  phone_number: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FictionBoardEntity {
  """참석자 수"""
  attendCount: Int!
  attendLists: [AttendListEntity!]!

  """소설 본문"""
  content: String!

  """마감일"""
  deadline: String! @deprecated(reason: "deprecated 되진않지만 타입이 변경될 수 있습니다.")
  fictionBoardTagLinks: [FictionBoardTagLinkEntity!]

  """장르"""
  genre: String!
  images: [ImageEntity!]!

  """소설 좋아요 수"""
  like: Int! @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")

  """소설 공지사항"""
  notice: String

  """소설 찜 수"""
  pickCount: Int! @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")
  picks: [PickEntity!]!

  """소설 썸네일 버퍼"""
  thumbnail: String! @deprecated(reason: "설계 오류로 인해 제거되거나 확장 될 예정")

  """소설 제목"""
  title: String!
  user: UserEntity!
}

type FictionBoardTagLinkEntity {
  createdAt: DateTime!
  fictionBoard: FictionBoardEntity!
  id: String!
  tag: TagEntity!
  updatedAt: DateTime!
}

type FollowCountEntity {
  followCount: Int!
  followerCount: Int!
  id: String!
  user: UserEntity!
}

type FollowerListOutput {
  id: String!
  user1: UserEntity!
}

type FollowingListOutput {
  id: String!
  user2: UserEntity!
}

type ImageEntity {
  fictionBoard: FictionBoardEntity!
  id: String!
  imgUrl: String!
  user: UserEntity!
}

type Mutation {
  checkNickName(nickname: String!): String!
  checkTokenEmail(email: String!, token: String!): String!
  createBoard(createBoardInput: CreateBoardInput!): BoardEntity!
  createComment(boardId: String!, comment: String!, fictionBoardId: String!): CommentEntity!
  createFictionBoard(createFictionBoardInput: CreateFictionBoardInput!): FictionBoardEntity!
  createNestedComment(commentId: String!, nestedComment: String!): NestedCommentEntity!
  createUser(createUserInput: CreateUserInput!): UserEntity!
  deleteBoard(boardId: String!): Boolean!
  deleteComment(commentId: String!): Boolean!
  deleteFictionBoard(fictionBoardId: String!): Boolean!
  deleteNestedComment(nestedCommentId: String!): Boolean!
  deleteUser: Boolean!
  findUserPassword(email: String!): String!
  follow(followingId: String!): String!
  login(email: String!, password: String!): String!
  logout: String!
  pickBoard(boardId: String!): String!
  pickFictionBoard(fictionBoardId: String!): String!
  restoreAccessToken: String!
  sendTokenToEmail(email: String!): String!
  updateBoard(boardId: String!, updateBoardInput: UpdateBoardInput!): BoardEntity!
  updateComment(commentId: String!, updateComment: String!): CommentEntity!
  updateFictionBoard(fictionBoardId: String!, updateFictionBoardInput: UpdateFictionBoardInput!): FictionBoardEntity!
  updateNestedComment(nestedCommentId: String!, updateNestedComment: String!): NestedCommentEntity!
  updatePassword(password: String!, rePassword: String!): String!
  updateUser(updateUserInput: UpdateUserInput!): UserEntity!
}

type NestedCommentEntity {
  comment: CommentEntity!
  content: String!
  createdAt: DateTime!
  id: String!
  updateAt: DateTime!
  user: UserEntity!
}

type PickEntity {
  board: BoardEntity!
  fictionBoard: FictionBoardEntity!
  id: String!
  user: UserEntity!
}

type Query {
  fetchAllBoardWithLikeCount(page: Int): [BoardEntity!]!
  fetchAllBoards(page: Int): [BoardEntity!]!
  fetchAllFictionBoard(page: Int): [FictionBoardEntity!]!
  fetchAllFictionBoardWithLikeCount(page: Int): [FictionBoardEntity!]!
  fetchBoard(fictionBoardId: String!): FictionBoardEntity!
  fetchComments(boardId: String!, fictionBoardId: String!, page: Int): [CommentEntity!]!
  fetchFollowCount(userId: String!): FollowCountEntity!
  fetchFollower(page: Int! = 1, userId: String!): [FollowerListOutput!]!
  fetchFollowing(page: Int! = 1, userId: String!): [FollowingListOutput!]!
  fetchMyAllBoards(page: Int): [BoardEntity!]!
  fetchMyAllFictionBoards(page: Int): [FictionBoardEntity!]!
  fetchMyBoard(boardId: String!): BoardEntity!
  fetchMyFictionBoard(fictionBoardId: String!): FictionBoardEntity!
  fetchMyFollowCount: FollowCountEntity!
  fetchMyPickBoards(page: Int): [PickEntity!]!
  fetchMyPickFictionBoard(page: Int): [PickEntity!]!
  fetchNestedComments(commentId: String!, page: Int): [NestedCommentEntity!]!
  fetchUser(userId: String!): UserEntity!
  fetchUserLoggedIn: UserEntity!
  fetchUsers(page: Int! = 1): [UserEntity!]!
  searchBoards(page: Int! = 1, word: String!): [FictionBoardEntity!]!
}

type TagEntity {
  fictionBoardTagLinks: [FictionBoardTagLinkEntity!]
  id: String!
  name: String!
}

input UpdateBoardInput {
  content: String
  image: String
  tag: [String!]
  title: String
}

input UpdateFictionBoardInput {
  content: String
  deadline: String
  genre: String
  image: String
  notice: String
  tag: [String!]
  title: String
}

input UpdateUserInput {
  age: String
  gender: String
  image: String
  name: String
  nickname: String
  phone_number: String
}

type UserEntity {
  age: String!
  email: String!
  gender: String!
  id: String!
  image: ImageEntity
  name: String!
  nickname: String!
  phone_number: String!
}